
function git_color {
    local git_status="$(git status 2> /dev/null)"

    if [[ ! $git_status =~ "working directory clean" ]]; then
        echo -e $Red
    elif [[ $git_status =~ "Your branch is ahead of" ]]; then
        echo -e $Yellow
    elif [[ $git_status =~ "nothing to commit" ]]; then
        echo -e $Green
    else
        echo -e $BYellow
    fi
}

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape sequences.

# Reset
Color_Off="\033[0m"       # Text Reset

# Regular Colors
Black="\033[0;30m"        # Black
Red="\033[0;31m"          # Red
Green="\033[0;32m"        # Green
Yellow="\033[0;33m"       # Yellow
Blue="\033[0;34m"         # Blue
Purple="\033[0;35m"       # Purple
Cyan="\033[0;36m"         # Cyan
White="\033[0;37m"        # White

# Bold
BBlack="\033[1;30m"       # Black
BRed="\033[1;31m"         # Red
BGreen="\033[1;32m"       # Green
BYellow="\033[1;33m"      # Yellow
BBlue="\033[1;34m"        # Blue
BPurple="\033[1;35m"      # Purple
BCyan="\033[1;36m"        # Cyan
BWhite="\033[1;37m"       # White

# Underline
UBlack="\033[4;30m"       # Black
URed="\033[4;31m"         # Red
UGreen="\033[4;32m"       # Green
UYellow="\033[4;33m"      # Yellow
UBlue="\033[4;34m"        # Blue
UPurple="\033[4;35m"      # Purple
UCyan="\033[4;36m"        # Cyan
UWhite="\033[4;37m"       # White

# Background
Bg_Black="\033[40m"       # Black
Bg_Red="\033[41m"         # Red
Bg_Green="\033[42m"       # Green
Bg_Yellow="\033[43m"      # Yellow
Bg_Blue="\033[44m"        # Blue
Bg_Purple="\033[45m"      # Purple
Bg_Cyan="\033[46m"        # Cyan
Bg_White="\033[47m"       # White

# High Intensty
IBlack="\033[0;90m"       # Black
IRed="\033[0;91m"         # Red
IGreen="\033[0;92m"       # Green
IYellow="\033[0;93m"      # Yellow
IBlue="\033[0;94m"        # Blue
IPurple="\033[0;95m"      # Purple
ICyan="\033[0;96m"        # Cyan
IWhite="\033[0;97m"       # White

# Bold High Intensty
BIBlack="\033[1;90m"      # Black
BIRed="\033[1;91m"        # Red
BIGreen="\033[1;92m"      # Green
BIYellow="\033[1;93m"     # Yellow
BIBlue="\033[1;94m"       # Blue
BIPurple="\033[1;95m"     # Purple
BICyan="\033[1;96m"       # Cyan
BIWhite="\033[1;97m"      # White

# High Intensty backgrounds
Bg_IBlack="\033[0;100m"   # Black
Bg_IRed="\033[0;101m"     # Red
Bg_IGreen="\033[0;102m"   # Green
Bg_IYellow="\033[0;103m"  # Yellow
Bg_IBlue="\033[0;104m"    # Blue
Bg_IPurple="\033[10;95m"  # Purple
Bg_ICyan="\033[0;106m"    # Cyan
Bg_IWhite="\033[0;107m"   # White


# Various variables you might want for your PS1 prompt instead
Time12h="\T"
Time12a="\@"
PathShort="\w"
PathFull="\W"
NewLine="\n"
Hostname="\h"
Username="\u"


# PS1="$LIGHT_GRAY$*$WHITE$GREEN \$(parse_git_branch)$LIGHT_GRAY\$ "
PS1="\[$Red\]ยง "
PS1+="\[$IBlack\]$Time12a"
PS1+="\[$White\] $Hostname "
PS1+="\[$BWhite\]$PathShort/"
PS1+="\[\$(git_color)\]\$(__git_ps1)"
PS1+="\[$White\] \$ "
PS2='> '
PS4='+ '
export PS1;
export PS2;
export PS4;


## the rest of the symbols for reference:

# \a     an ASCII bell character (07)
# \d     the date in "Weekday Month Date" format (e.g., "Tue May 26")
# \D{format}
#      the format is passed to strftime(3) and the result is inserted into the prompt string; an  empty  format
#      results in a locale-specific time representation.  The braces are required
# \e     an ASCII escape character (033)
# \h     the hostname up to the first `.'
# \H     the hostname
# \j     the number of jobs currently managed by the shell
# \l     the basename of the shell's terminal device name
# \n     newline
# \r     carriage return
# \s     the name of the shell, the basename of $0 (the portion following the final slash)
# \t     the current time in 24-hour HH:MM:SS format
# \T     the current time in 12-hour HH:MM:SS format
# \@     the current time in 12-hour am/pm format
# \A     the current time in 24-hour HH:MM format
# \u     the username of the current user
# \v     the version of bash (e.g., 2.00)
# \V     the release of bash, version + patch level (e.g., 2.00.0)
# \w     the current working directory, with $HOME abbreviated with a tilde
# \W     the basename of the current working directory, with $HOME abbreviated with a tilde
# \!     the history number of this command
# \#     the command number of this command
# \$     if the effective UID is 0, a #, otherwise a $
# \nnn   the character corresponding to the octal number nnn
# \\     a backslash
# \[     begin  a  sequence of non-printing characters, which could be used to embed a terminal control sequence
#      into the prompt
# \]     end a sequence of non-printing characters
